package com.cts.demo;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.cts.demo.controller.AdminController;
import com.cts.demo.repo.AdminRepository;
import com.cts.demo.pojo.Admin;

@SpringBootTest
@ExtendWith(value = SpringExtension.class)


class BuyerApplicationTests {

	@Autowired
	private AdminRepository adminRepo;
	@Autowired
	private AdminController userController;

	@BeforeEach
	public void setUp() {
		Admin admin = new Admin();
		admin.setAdminId("1");
		admin.setAdminName("ramya");
		admin.setAdminPwd("52344");
		
		adminRepo.save(admin);
	}

	@AfterEach
	public void cleanUp() {
		adminRepo.deleteAll();
	}

	@Test
	
	void shouldSaveUser() {
		// arrange
		Admin admin = new Admin();
		admin.setAdminId("12");
		admin.setAdminName("ramya1");
		admin.setAdminPwd("523442");
		

//act
		User savedUser = userController.saveUser(admin);
		// assert
		Assertions.assertThat(savedUser.getConfirmed()).isEqualTo(admin.getConfirmed());
		Assertions.assertThat(savedUser.getEmail()).isEqualTo(admin.getEmail());
		Assertions.assertThat(savedUser.getPetId()).isEqualTo(admin.getPetId());
		Assertions.assertThat(savedUser.getUserId()).isEqualTo(admin.getUserId());
		Assertions.assertThat(savedUser.getUserName()).isEqualTo(admin.getUserName());
		Assertions.assertThat(savedUser.getUserPwd()).isEqualTo(admin.getUserPwd());
	}

	@Test
	void shouldUpdateSavedUser() {
		// arrange
		User user = new User();
		user.setEmail("newEmail@gmail.com");
		user.setUserPwd("ramya");
		user.setPetId("5");
		user.setUserId("12");
		user.setUserName("ramya");
		user.setConfirmed("confirmed");
//act
		User updatedUser = userController.updateUser(user, "12");
		// assert
		Assertions.assertThat(updatedUser.getEmail()).isEqualTo(user.getEmail());

	}

	@Test
	void shouldDeleteUser() {
		// arrange
		// act
		boolean deletedUser = userController.deleteUser("12");
		// assert
		Assertions.assertThat(deletedUser).isTrue();
		Assertions.assertThat(userRepo.findAll()).hasSize(0);

	}
	@Test
	void shouldRetriveUser() {
		//act
		User foundUser=userController.findOneUser("12");
		//assert
		Assertions.assertThat(foundUser).isNotNull();
		
	}


}
